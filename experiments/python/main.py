# Example Python3 code generated by `qwen3:8b`

def main():
    """Main function demonstrating Python 3 features"""

    # 1. Function parameters with annotations
    def greet(name: str, times: int = 3) -> None:
        """Greet someone a specified number of times"""
        for _ in range(times):
            print(f"Hello {name}!")

    # 2. Lambda functions
    square = lambda x: x**2  # noqa: E731
    print("Lambda result:", square(5))

    # 3. Data structures
    # List
    fruits = ["apple", "banana", "cherry"]
    # Tuple
    coordinates = (10, 20)  # noqa: F841
    # Set
    unique_numbers = {1, 2, 3, 2, 1}  # noqa: F841
    # Dictionary
    info = {"name": "Alice", "age": 30, "city": "Wonderland"}

    # 4. Comprehensions
    squared_numbers = [x**2 for x in range(1, 11)]  # noqa: F841
    even_numbers = [x for x in range(1, 11) if x % 2 == 0]  # noqa: F841

    # 5. Control flow
    if len(fruits) > 5:
        print("Many fruits!")
    elif len(fruits) == 3:
        print("Exactly three fruits")
    else:
        print("Few fruits")

    # 6. Error handling
    try:
        result = 10 / 0  # noqa: F841
    except ZeroDivisionError as e:
        print("Error:", e)
    finally:
        print("Execution complete")

    # 7. Context managers
    with open("demo.txt", "w") as file:
        file.write("This is a demo file")

    # 8. Standard library modules
    import math

    print("Math constants:", math.pi, math.e)

    # 9. Decorators
    def my_decorator(func):
        def wrapper(*args, **kwargs):
            print("Before function call")
            result = func(*args, **kwargs)
            print("After function call")
            return result

        return wrapper

    @my_decorator
    def say_hello():
        print("Hello from decorated function!")

    # 10. Generators
    def count_up_to(max):
        count = 1
        while count <= max:
            yield count
            count += 1

    print("Generator results:")
    for number in count_up_to(5):
        print(number)

    # 11. Various syntax elements
    # Tuple packing
    a, b = 1, 2  # noqa: F841
    # String formatting
    print(f"Name: {info['name']}, Age: {info['age']}")
    # Bitwise operations
    print("Bitwise AND:", 5 & 3)
    # Identity operators
    x = [1, 2, 3]
    y = x
    z = [1, 2, 3]
    print("x is y:", x is y)
    print("x is z:", x is z)
    # Membership operators
    print("2 in x:", 2 in x)

    # 12. Advanced data structures
    # Named tuple
    from collections import namedtuple

    Point = namedtuple("Point", ["x", "y"])
    p = Point(11, 22)
    print("Named tuple:", p)

    # 13. Type hints
    def add_numbers(a: int, b: int) -> int:
        return a + b

    # 14. itertools
    from itertools import chain

    combined = chain([1, 2, 3], [4, 5, 6])
    print("Combined list:", list(combined))

    # 15. datetime
    from datetime import datetime, timedelta

    now = datetime.now()
    print("Current time:", now)
    print("Time after 2 hours:", now + timedelta(hours=2))

    # 16. os module
    import os

    print("Current working directory:", os.getcwd())

    # 17. random module
    import random

    print("Random number:", random.randint(1, 100))

    # 18. re module
    import re

    match = re.search(r"\d+", "The answer is 42")
    print("Regex match:", match.group())


if __name__ == "__main__":
    main()
